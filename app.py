import telebot
from telebot import types
from dotenv import load_dotenv
import os
from database import init_db, checkIsTodayCreate, add_meal, get_daily_stats, getNorm, setNorm
from convert import convertTxt, converImage
import asyncio
import io
import datetime

# ---------ENV FILES---------
load_dotenv()
# tokenbot=YOUR_TOKEN_BOT
# API_KEY=YOUR_API_KEY_FOR_SPOONACULAR

file_db = "./db/database.db"
bot = telebot.TeleBot(os.getenv("tokenbot"))

init_db()

user_states = {}


# ------Format output functions-------

def get_stat_message(user_id):
    stats = get_daily_stats(user_id)
    goals = getNorm(user_id)
    if not stats['totals']:
        return "–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    c, p, f, ch = stats['totals']
    cg, pg, fg, chg = goals
    reply = f"üéØ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
    reply += f"–ö–∞–ª–æ—Ä–∏–∏: {c:.1f}/{cg:.1f} –∫–∫–∞–ª\n"
    reply += "".join(["üü©" if (i + 1) * 20 < (c / cg) * 100 else "‚¨úÔ∏è" for i in range(5)]) + "\n\n"
    reply += f"–ë–µ–ª–∫–∏: {p:.1f}/{pg:.1f} –≥\n"
    reply += "".join(["üü©" if (i + 1) * 20 < (p / pg) * 100 else "‚¨úÔ∏è" for i in range(5)]) + "\n\n"
    reply+= f"–ñ–∏—Ä—ã: {f:.1f}/{fg:.1f} –≥\n"
    reply += "".join(["üü©" if (i + 1) * 20 < (f / fg) * 100 else "‚¨úÔ∏è" for i in range(5)]) + "\n\n"
    reply += f"–£–≥–ª–µ–≤–æ–¥—ã: {ch:.1f}/{chg:.1f} –≥\n"
    reply += "".join(["üü©" if (i + 1) * 20 < (ch / chg) * 100 else "‚¨úÔ∏è" for i in range(5)]) + "\n\n"
    return reply

def get_date():
    months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞",
        4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
        7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è",
        10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    today = datetime.datetime.now()
    day = today.day
    month = months[today.month]
    return f"{day} {month}"

def my_goals_message(user_id):
    goals = getNorm(user_id)
    cg, pg, fg, chg = [int(x) for x in goals]
    reply = f"üéØ –ú–æ–∏ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è\n\nüìä –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞:\n\n‚Ä¢ {cg} –∫–∫–∞–ª\n‚Ä¢ {pg} –≥ –±–µ–ª–∫–æ–≤\n‚Ä¢ {fg} –≥ –∂–∏—Ä–æ–≤\n‚Ä¢ {chg} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"
    return reply

def get_history(user_id):
    stat = get_daily_stats(user_id)['meals']
    reply = f"üìÖ –°–µ–≥–æ–¥–Ω—è, {get_date()}\n\n"
    if stat:
        reply += "üìä–°–µ–≥–æ–¥–Ω—è –≤—ã —Å—ä–µ–ª–∏:\n"
        for x in stat:
            print(x)
            reply += '‚Ä¢ ' + x[0] + '\n'
    else:
        reply += "–ü–æ–∫–∞ —á—Ç–æ –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Å—ä–µ–ª–∏"
    return reply



# ------Calc data functions------
def calculate_bmr(gender, weight, height, age):
    if gender == 'male':
        return 10 * weight + 6.25 * height - 5 * age + 5
    else:
        return 10 * weight + 6.25 * height - 5 * age - 161

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def send_welcome(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìä –ú–æ–π –¥–µ–Ω—å")
    btn2 = types.KeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è")
    btn3 = types.KeyboardButton("üéØ –¶–µ–ª–∏")
    btn4 = types.KeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ")
    markup.row(btn1, btn2)
    markup.row(btn4, btn3)
    user_id = message.from_user.id
    if user_id in user_states:
        user_states[user_id] = None
    checkIsTodayCreate(user_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Å—ä–µ–ª, –∏ —è —Å–∫–∞–∂—É, —Å–∫–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π!", reply_markup=markup)
    bot.delete_message(chat_id, message.message_id)
        
        



@bot.message_handler(func=lambda message: message.text == "üìä –ú–æ–π –¥–µ–Ω—å")
def stats_handler(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if user_id in user_states:
        user_states[user_id] = None
    reply = f"üìÖ –°–µ–≥–æ–¥–Ω—è, {get_date()}\n\n" + get_stat_message(user_id)
    bot.send_message(chat_id, reply)
    bot.delete_message(chat_id, message.message_id)
    
@bot.message_handler(func=lambda message: message.text == "üéØ –¶–µ–ª–∏")
def profile_stats(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if user_id in user_states:
        user_states[user_id] = None
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_save = telebot.types.InlineKeyboardButton(text="–í—Ä—É—á–Ω—É—é",
                                                     callback_data='setNorm')
    button_change = telebot.types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
                                                     callback_data='setAutoNorm')
    keyboard.add(button_save, button_change)
    bot.send_message(chat_id, my_goals_message(chat_id), reply_markup=keyboard)
    bot.delete_message(chat_id, message.message_id)

    
@bot.message_handler(func=lambda message: message.text == "üìÖ –ò—Å—Ç–æ—Ä–∏—è")
def profile_stats(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    if user_id in user_states:
        user_states[user_id] = None
    
    reply = get_history(user_id)
    bot.send_message(chat_id, reply)
    bot.delete_message(chat_id, message.message_id)

@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ")
def add_choose_meal(message):
    chat_id = message.chat.id
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_save = telebot.types.InlineKeyboardButton(text="–í—Ä—É—á–Ω—É—é",
                                                     callback_data='addmeal')
    button_change = telebot.types.InlineKeyboardButton(text="–§–æ—Ç–æ",
                                                     callback_data='addmealimg')
    keyboard.add(button_save, button_change)
    bot.send_message(chat_id, "‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å", reply_markup=keyboard)
    bot.delete_message(chat_id, message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == 'addmeal')
def add_meal_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)
    message = call.message
    chat_id = message.chat.id
    user_id = call.from_user.id
    if user_id in user_states:
        user_states[user_id] = None
    user_states[user_id] = "wait_food"
    bot.send_message(chat_id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞")
    
@bot.callback_query_handler(func=lambda call: call.data == 'addmealimg')
def add_meal_image_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)
    message = call.message
    chat_id = message.chat.id
    user_id = call.from_user.id
    if user_id in user_states:
        user_states[user_id] = None
    user_states[user_id] = "wait_food_image"
    bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞")
    
@bot.callback_query_handler(func=lambda call: call.data == 'setNorm')
def add_meal_image_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)
    message = call.message
    chat_id = message.chat.id
    user_id = call.from_user.id
    if user_id in user_states:
        user_states[user_id] = None
    user_states[user_id] = "wait_norm"
    bot.send_message(chat_id, "–ö–ö–ê–õ/–ë–ï–õ–ö–ò/–ñ–ò–†–´/–£–ì–õ–ï–í–û–î–´\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n2380/88/66/359")


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@bot.message_handler(func=lambda m: user_states.get(m.chat.id) is not None)
def meal_adding(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text.lower().strip()
    if user_id in user_states:
        if user_states.get(user_id) == "wait_food":
            kc, pr, ft, cr = asyncio.run(convertTxt(text))
            if kc != -1:
                add_meal(user_id, text, kc, pr, ft, cr)
                bot.send_message(chat_id, get_stat_message(user_id))
            else:
                bot.send_message(chat_id, "–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –±–ª—é–¥–∞üò≠")
        elif user_states.get(user_id) == "wait_norm":
            norm = text.split('/')
            try:
                setNorm(user_id, *[int(x) for x in norm])
                bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!")
            except:
                bot.send_message(chat_id, "–ö–∞–∂–µ—Ç—Å—è —Ç—ã –æ—Ç–ø—Ä–∞–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        else:
            bot.send_message(chat_id, "–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å")
        user_states[user_id] = None
        
@bot.message_handler(content_types=['photo'])
def photo(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    fileID = message.photo[-1].file_id   
    file = bot.get_file(fileID)
    downloaded_file = bot.download_file(file.file_path)
    image_stream = io.BytesIO(downloaded_file)
    if user_id in user_states:
        if user_states.get(user_id) == "wait_food_image":
            name, kc, pr, ft, cr = asyncio.run(converImage(image_stream))
            if name != "undf":
                add_meal(user_id, name, kc, pr, ft, cr)
                bot.send_message(chat_id, get_stat_message(user_id))
            else:
                bot.send_message(chat_id, "–ù–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –±–ª—é–¥–∞üò≠")
        else:
            bot.send_message(chat_id, "–í–≤–µ–¥–∏ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–º–∞–Ω–¥")
        user_states[user_id] = None

# ----------------setNorm--------
user_data = {}

@bot.callback_query_handler(func=lambda call: call.data == 'setAutoNorm')
def ask_gender(call):
    bot.answer_callback_query(callback_query_id=call.id)
    message = call.message
    chat_id = message.chat.id
    user_data[chat_id] = {}
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data='gender_male'),
        types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data='gender_female')
    )
    bot.send_message(chat_id, STEPS['gender'], reply_markup=markup)
    
    
STEPS = {
    'gender': '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:',
    'age': '–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:',
    'height': '–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç (—Å–º):',
    'weight': '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):',
    'activity': '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:'
}

ACTIVITY_FACTORS = {
    'min': 1.2,
    'low': 1.375,
    'medium': 1.55,
    'high': 1.725,
    'extreme': 1.9
}

@bot.callback_query_handler(func=lambda call: call.data.startswith('gender_'))
def handle_gender(call):
    gender = 'male' if call.data == 'gender_male' else 'female'
    user_data[call.message.chat.id]['gender'] = gender
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, STEPS['age'])
    print(user_data)

@bot.message_handler(func=lambda m: m.chat.id in user_data and 'gender' in user_data[m.chat.id] and 'age' not in user_data[m.chat.id])
def handle_age(message):
    try:
        age = int(message.text)
        if age < 1 or age > 120:
            raise ValueError
        user_data[message.chat.id]['age'] = age
        bot.send_message(message.chat.id, STEPS['height'])
    except:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120)")

@bot.message_handler(func=lambda m: m.chat.id in user_data and 'height' not in user_data[m.chat.id])
def handle_height(message):
    try:
        height = int(message.text)
        if height < 50 or height > 250:
            raise ValueError
        user_data[message.chat.id]['height'] = height
        bot.send_message(message.chat.id, STEPS['weight'])
    except:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–≤ —Å–º, –æ—Ç 50 –¥–æ 250)")

@bot.message_handler(func=lambda m: m.chat.id in user_data and 'weight' not in user_data[m.chat.id])
def handle_weight(message):
    try:
        weight = int(message.text)
        if weight < 30 or weight > 300:
            raise ValueError
        user_data[message.chat.id]['weight'] = weight
        ask_activity(message)
    except:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–≤ –∫–≥, –æ—Ç 30 –¥–æ 300)")

def ask_activity(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è", callback_data='act_min'))
    markup.row(types.InlineKeyboardButton("–õ—ë–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data='act_low'))
    markup.row(types.InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data='act_medium'))
    markup.row(types.InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data='act_high'))
    markup.row(types.InlineKeyboardButton("–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è", callback_data='act_extreme'))

    bot.send_message(message.chat.id, STEPS['activity'], reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('act_'))
def handle_activity(call):
    user_id = call.message.from_user.id
    chat_id = call.message.chat.id
    act_key = call.data[4:]
    user_data[call.message.chat.id]['activity'] = ACTIVITY_FACTORS[act_key]

    bot.delete_message(chat_id, call.message.message_id)

    # –†–∞—Å—á—ë—Ç
    data = user_data[chat_id]
    bmr = calculate_bmr(data['gender'], data['weight'], data['height'], data['age'])
    calories = round(bmr * data['activity'])
    proteins = data['weight'] * 2.2
    fats = data['weight'] * 1
    carbs = round((calories - (proteins * 4 + fats * 9)) / 4)

    setNorm(user_id, calories, proteins, fats, carbs)

    bot.send_message(chat_id, my_goals_message(user_id))
        
    
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    bot.polling(none_stop=True)